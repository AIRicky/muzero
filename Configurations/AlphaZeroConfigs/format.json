{
  "name": "format",
  "algorithm": "Algorithm name @see experimenter Enum",
  "architecture": "What neural architecture to use. For the currently implemented ones @see DefaultAlphaZero",
  "debug": "Whether to store additional statistics and variables during training for debugging",


  "args": {
    "numIters": "(int) Number of iterations to repeat the training loop (self play - training - pitting)",
    "numEps": "(int) Number of episodes to perform self play for collecting training examples",
    "tempThreshold": "(double) A boundary for the exploration temperature when exponentiating visit counts in MCTS",
    "updateThreshold": "(double: [0, 1]) Pitting: new neural net will be accepted if win ratio exceeds this threshold",
    "maxlenOfQueue": "(int) Maximum number of game examples to train the neural networks on",
    "numMCTSSims": "(int) Number of planning moves for MCTS to simulate",
    "arenaCompare": "(int) Number of games to play during arena play to determine if new net will be accepted",
    "cpuct": "(double) Exploration constant for AlphaZero in the PUCT formula",

    "checkpoint": "(path: string) Directory to store sampled experiences and fitted parameters in",
    "load_model": "(bool) Whether to load in a previously trained model from the checkpoint directory",
    "load_folder_file": "(Array, ['directory', 'file']) Specify which model to load in",
    "numItersForTrainExamplesHistory": "(int) Maximum number of self play iterations kept in the deque"
  },

  "net_args": {
    "lr": "(double) Learning rate for the neural network's optimizer",
    "dropout": "(double) DropOut regularization rate for the neural network",
    "epochs": "(int) Amount of weight updates to perform per self play iteration",
    "batch_size": "(int) Stochastic gradient descent batch size",
    "cuda": "(bool) Whether to make use of GPU accelerated computation (NVIDIA only)",
    "num_channels": "(int) Number of feature maps in the convolutional network",
    "choice": "(int: [0-3]) Choice between a small (0) or a large (3) neural network"
  }
}
